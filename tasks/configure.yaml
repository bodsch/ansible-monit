---

- name: create includes folder
  ansible.builtin.file:
    path: "{{ monit_includes }}"
    state: directory
    mode: 0750

- name: create lib folder
  ansible.builtin.file:
    path: "{{ monit_lib_folder }}"
    state: directory
    mode: 0750

- name: create monitrc
  ansible.builtin.template:
    src: etc/monitrc.j2
    dest: "{{ monitrc_conf }}"
    owner: root
    group: root
    mode: 0700
    backup: true
  notify:
    - validate config
    - reload monit

- name: create config for webinterface
  ansible.builtin.template:
    src: etc/monit.d/webinterface.j2
    dest: "{{ monit_includes }}/webinterface"
    owner: root
    group: root
    mode: 0644
  when:
    - monit_webinterface is defined
    - monit_webinterface.enabled is defined
    - monit_webinterface.enabled
  notify:
    - validate config
    - reload monit

- name: create config for mail alerts
  ansible.builtin.template:
    src: etc/monit.d/mail.j2
    dest: "{{ monit_includes }}/mail"
    owner: root
    group: root
    mode: 0644
  when:
    - monit_mail is defined
    - monit_mail.enabled is defined
    - monit_mail.enabled
  notify:
    - validate config
    - reload monit

- name: monit configuration
  when:
    - monit_services is defined
    - monit_services | count > 0
  block:
    - name: create monit monitors
      ansible.builtin.template:
        src: etc/monit.d/monitor.j2
        dest: "{{ monit_includes }}/{{ item.name }}"
        owner: root
        group: root
        mode: 0644
      loop: "{{ monit_services }}"
      loop_control:
        label: "{{ item.name }}"
      notify:
        - validate config
        - reload monit

    - name: create facts for configured monitors
      ansible.builtin.template:
        src: "etc/facts.d/monit.facts.j2"
        dest: "/etc/ansible/facts.d/monit.fact"
        mode: 0755

    - name: get latest system information
      ansible.builtin.setup:
        filter: "ansible_local"

    - name: get configured monitors
      ansible.builtin.command: |
        ls -1 {{ monit_includes }}
      register: monit_services_present
      changed_when: false

    - name: remove unused monitors
      ansible.builtin.file:
        path: "{{ monit_includes }}/{{ item }}"
        state: absent
      with_items: "{{ monit_services_present.stdout_lines | default([]) }}"
      when:
        - monit_service_delete_unlisted
        - item | basename not in ansible_local.monit.configured_services
      notify:
        - validate config
        - reload monit

...
